What is Express.js?

Framework that facilitates the node part just like spring boot for java.
is all about Middleware 

// adding middleware function. next arg would be consider another function saying it will be next middleware.
app.use((req, res, next) => {
    console.log('In the middleware 1st');
    next();  // allows to go to the next middleware/function.
}); 

npm install --save express

npm install --save body-parser

npm init creates package.json into your project.
adding start property into package.json to start execution with npm start at terminal.


installing 3rd party dependency to promptly update my changes without restarting the server. npm install nodemon --save-dev


app.listen(3000); // does both comments below
// const server = http.createServer(app);
// server.listen(3000);


// const routes = require('./routes'); // will look for this file in the same folder. Creating a connection to other file.


******* Module 5 Express ************

const http = require('http');
const bodyParser = require('body-parser')
const express = require('express');
const app = express();


// this middleware in only for parsing body from request and responses.
app.use(bodyParser.urlencoded({extended: false}));

app.use('/', (req, res, next) => {
    console.log('This always runs...');
    next();
}); 

// must be before...
app.use('/add-product', (req, res, next) => {
    console.log('In the middleware add product middleware');
    res.send('<form action="/product" method="POST"><input type="text" name="title"><button type="submit">Add Product</button></form>');
}); 

app.post('/product', (req, res, next) => {
    //extraction what front sent...
    console.log(req.body);
    res.redirect('/');
});

app.use('/', (req, res, next) => {
    console.log('In the middleware home middleware');
    res.send('<h1>Hello from express!!!</h1>'); // allows us to send a response with body and all the tricks.
}); 


app.listen(3000);



----------------------

const path = require('path'); // grab the whole path on your file structure. 
__dirname = the root folder of where this variable is being called


module.exports = path.dirname(require.main.filename);

******* Module 5 Express ************


******* Module 6 Templating engines *************

EJS <p> <%= name %> </p>, Pug(jade) p 3 #{name}, Handlebars <p> {{ name }} </p>.

Installing all 3 --> npm install --save ejs pug express-handlebars@3.0

EJS is the one.

<% 'Scriptlet' tag, for control-flow, no output
<%= Outputs the value into the template (HTML escaped)
<%- Outputs the unescaped value into the template

******* Module 6 Templating engines *************

************ Module 7 MVC *****************



************ Module 7 MVC *****************

https://as2.ftcdn.net/v2/jpg/01/12/46/75/1000_F_112467534_9jaCZZRAEMsIcICc5Az0NSX7RenIAKw9.jpg

https://www.publicdomainpictures.net/pictures/340000/velka/spain-flag-and-map-country-shape-idea-design-1588674499Cq5.jpg

https://as2.ftcdn.net/jpg/07/63/70/93/220_F_763709359_yiF1NfTkHP7dhz4KvQZBxDTvoYk4ZjBq.jpg

https://t3.ftcdn.net/jpg/07/67/95/62/240_F_767956245_Zrshnvm1B7qeraVeVLvNrG6R2srR6OrT.jpg


https://images.pexels.com/photos/869258/pexels-photo-869258.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1

https://images.pexels.com/photos/300857/pexels-photo-300857.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1

https://images.pexels.com/photos/2179424/pexels-photo-2179424.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1

https://images.pexels.com/photos/18012386/pexels-photo-18012386/free-photo-of-silhouette-of-woman-in-costume-with-sword.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1



*************** Module 10 database ****************

npm install --save mysql2

NoSQL uses collections instead of tables. 
Also is considered Schemaless. We don't have exactly the same fields...
There is no JOINS (table relations) they use duplicates.
No Schema and Relations (or very few relations).


CREATE TABLE `node_complete`.`products` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(255) NOT NULL,
  `price` DOUBLE NOT NULL,
  `description` TEXT NOT NULL,
  `imageUrl` VARCHAR(255) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE);

  INSERT INTO `node_complete`.`products` (`title`, `price`, `description`, `imageUrl`) VALUES ('A Book', '12.99', 'asdasd', 'https://as2.ftcdn.net/v2/jpg/01/12/46/75/1000_F_112467534_9jaCZZRAEMsIcICc5Az0NSX7RenIAKw9.jpg');


*** For this module there were only products examples using mysql. Easy examples and we could continue throughout the other services later on this module branch.
*************** Module 10 database ****************


*************** Module 11 Sequelize ****************

npm install --save sequelize   ** dependant on the mysql2 that we installed last module.

Sequelize = An Object-Relational Mapping Libary. Something similar to CrudRepository from Spring Java.

Both module 10 and 11 uses promises for queries... using the .then().catch();

With Sequelize v5, findById() (which we'll use in this course) was replaced by findByPk().

Creating an association (JOINS) with Sequelize.

*************** Module 11 Sequelize ****************


************** Module 12 MongoDB *****************
- Database solution/Engine.
- It can store lots and lots of data.
We use cloud connection from mongodb official website.

npm install --save mongodb

mongodb+srv://rodrigo:rodrigo@nodejslearning.8nvpy.mongodb.net/?retryWrites=true&w=majority&appName=nodeJSLearning

************** Module 12 MongoDB *****************
